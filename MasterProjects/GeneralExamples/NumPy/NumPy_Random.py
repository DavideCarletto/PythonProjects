import  numpy as np
from numpy import random
import matplotlib.pyplot as plt
import  seaborn as sns

def generate_random():

    arr = random.randint(100, size=5)
    # arr = random.rand(5) generates random numbers from 0 to 1, u gotta specify the size of the array

    arrChoice = random.choice(arr, size=(2,3))

    print(f"Array generated randomly: {arr}")
    print(f"Array 2D generated by choice: {arrChoice}")

    # Data distribution with probabilities

    prob = [0.1,0.5,0.2,0.1,0.1] #the number of elements must be the size of the array, and the sum should not go over 1 (max probability)

    arrProb = random.choice(arr, p=prob, size=10)

    print(f"Array generated with probability: {arrProb}")

def shuffle_array():

    arr = random.randint(10, size=10)

    print(f"Original array: {arr}")

    random.shuffle(arr)
    shuffled = random.permutation(arr)

    print(f"Array shuffled: {arr}") #the shuffle() method makes changes to the original array
    print(f"Array permuted: {shuffled}")

def normal_distribution():

    # sns.distplot([0, 1, 2, 3, 4, 5], hist= False)
    # plt.show()

    x = random.normal(loc=0, scale=2, size=(2, 100))  #loc means the (on the x axis) peak of the Gaussian-bell is, scale is the standard deviation and size is the shape of the returned array
    print(x)

    sns.distplot(x, hist=False)
    plt.show()

def binomial_distribution():

    # Binomial Distribution is a Discrete Distribution.
    # It describes the outcome of binary scenarios, e.g. toss of a coin, it will either be head or tails.

    x = random.binomial(n=10, p=0.5, size=10)
    print(f"Binomial distribution: {x}")

    sns.distplot(random.binomial(n=10, p=0.5, size=1000), hist=True, kde=False) # where n is the numbers of trials (a coin tossed n times), p is the probability of occurence of each trial (e.g. for toss of a coin 0.5 each).
    plt.show()

    # The main difference is that normal distribution is continous whereas binomial is discrete, but if there are enough data points it will be quite similar to normal distribution with certain loc and scale.

    sns.distplot(random.normal(loc=50, scale=5, size=1000), hist=False, label='normal')
    sns.distplot(random.binomial(n=100, p=0.5, size=1000), hist=False, label='binomial')
    plt.show()

def poisson_distribution():

    # Poisson Distribution is a Discrete Distribution.
    # It estimates how many times an event can happen in a specified time. e.g. If someone eats twice a day what is probability he will eat thrice?

    x = random.poisson(lam=2, size=10) # where lam is the rate or known number of occurences e.g. 2 for above problem
    print(f"Poisson distribution: {x}")

    sns.distplot(random.poisson(lam=2, size=1000), kde=True)
    plt.show()

    #Normal distribution is continous whereas poisson is discrete, but we can see that similar to binomial for a large enough poisson distribution it will become similar to normal distribution with certain std dev and mean.

    sns.distplot(random.normal(loc=50, scale=7, size=1000), hist=False, label='normal')
    sns.distplot(random.poisson(lam=50, size=1000), hist=False, label='poisson')

    plt.show()

def main():
    #generate_random()
    #shuffle_array()
    #normal_distribution()
    #binomial_distribution()
    poisson_distribution()

if __name__ == "__main__":
    main()

